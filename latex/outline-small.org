OUTLINE FOR 'SMALL' BOOK--JUST INTRODUCING THE QUINES-GENERATING INTERPRETER

THE PRIME DIRECTIVE

Stick to the goal: ensure the reader fully understands how the
big-step relational interpreter works.  in particular, the reader
should be able to modify or extend the relational interpreter, or
implement a relational interpreter for another langugae.  Anything
that doesn't advance this goal must be cut, put in a margin note, made
an exercise, or moved to an appendix.

MAJOR QUESTIONS/ISSUES

How much Scheme do I want to introduce?  Do I want to try to teach
Scheme?  Or rather review Scheme fundamentals, and make sure the
reader understands quasiquote, pattern matching, lexical scope?

Do I want to include an mK implementation section?  I think not.  Want
to keep this a small, very directed book.

Seems like there a tension bewteen an overwhelming amount of detail,
and too much mystery.  I think I'll err on the too much mystery side
for now, then add the minimum relevant details once readers start
giving me feedback.

From a presentation standpoint, it is arguably better to add cons than
list, even though the generated quine is somewhat longer, since
handling cons doesn't require recursion.  Also, adding cons naturally
leads to adding car, cdr, and null?.  Those, plus 'if' and 'equal?', are
sufficient to express append, member?, rember, etc.



??? is it possible to express equal? vs eqv? vs eq? in the
interpreter?  eq? might be possible using store-passing style


??? Is any of this in scope?
----------------------------
call-by-value vs call-by-name vs call-by-need
alpha-equivalence
naive vs capture-avoiding substitution
environments vs substitution
beta reduction
eta-expansion/eta-reduction
----------------------------
seems like some of these topics are important from a context/design
decision standpoint.  could potentially include a combinatory logic
reducer, a CBV small-step reducer for Scheme using naive substitution,
and the big-step interpreter.  Could even include a big-step
call-by-name reducer for lambda calculus, using nominal logic.  Is
this too much?  All of these topics seem related, and to some extent
you can't fully understand one of these interpreters/reducers without
understanding the alternatives.  May be too much, though.


EXERCISES (might just turn some of these into actual sections of the
book, with full explanations and derivations):

Scheme
------

miniKanren
----------

extending relational interpreter
--------------------------------

add null?, cons, car, cdr
then implement 'append' using Y combinator, and make it run backwards

add if

add equal?

add letrec

add numbers, sub1, *, and implement factorial using Y combinator

add set! using store-passing style

implement an interpreter for a language other than Scheme

=================================


look at: dissertation, papers, summer school, miniKanren.org, blog
posts, core.logic pages, tutorials, videos of talks I've given, etc.

think about how I normally present these ideas to people

figure out which examples, and what code, goes where


IMPORTANT:

talk about shadowing of built-ins for the relational interpreter

point out that even if we allow shadowing, we are treating 'list' (for
example) specially as a 'built-in', since we can't write things like:

((lambda (x) (x x)) list)

(which returns (#<procedure list>) in Vicare).  This is because 'list'
isn't bound in the initial environment.  Should also show how to add
list, cons, etc., to the initial environment.  Do I actually know how
to do this/the right way to do this?


Point out that the mk interpreter will fail for Scheme programs that
would signal errors in Scheme (due to referencing unbound variables,
dividing by zero, wrong number of arguments to an application, etc.).
In some cases, programs that would diverge in Scheme will fail
finitely under the relational interpreter.  For example,

(evalo `(cons ((lambda (x) (x x)) (lambda (x) (x x))) 5) 6)

should fail finitely, since the relational reducer can fail as soon as
it recognizes that the outermost expression is a call to 'cons', yet
the output isn't a pair.  So, failure in mk is a proof that the input
expression cannot evaluate to the specified output value.


FAILING FAST BY PEEKING UNDER LAMBDAS

Michael Ballantyne pointed out today (26 June 02014) that we can
"peek" under the lambda in the interpreter, which can also lead to
fail-fast behavior.  For example,

(evalo `((lambda (x) 5) ((lambda (x) (x x)) (lambda (x) (x x))) 6)

should fail finitely, if we peek under the lambda in (lambda (x) 5);
clearly, there is no way the body of this lambda expression can
evaluate to the specified output value, 6.  Therefore, there is no
need to evaluate omega before performing the beta step, even under
call-by-value lambda semantics.

Not sure how much I want to get into the peeking under lambdas
optimization in the main text.  Would make a good marginnote, at
least.  Maybe it's worth exploring in 'Other Extensions'.











Title:
How to Write a Relational Scheme Interpreter in miniKanren

Writing Relational Interpreters in miniKanren

Writing Interpreters in Relational Style

Writing Relational-Style Interpreters in miniKanren




Alternate approach to structuring the book, the Scheme
intro/refresher, etc., would be to lead with a Scheme interpreter
written in Scheme.  Then introduce miniKanren, and then create the
relational interpreter in miniKanren.

PART I: WRITING A SCHEME INTERPRETER IN SCHEME
PART II: INTRODUCTION TO PROGRAMMING IN MINIKANREN
PART III: WRITING A SCHEME INTERPRETER IN MINIKANREN

+ would get Schemely stuff, lexical scope, environments, closures,
  etc., out of the way at the beginning, and would ensure the reader
  understood enough about Scheme (how to use Scheme, Scheme semantics,
  etc.) to read the rest of the book
- the reader who just wants to understand the relational interpreter
  would need more patience before getting to the payoff.
  Although...someone already familiar with Scheme and how to write
  interpreters in Scheme could just skip to Part II.

If I used this approach, what would I assume regarding knowledge of
Scheme?  I could do the C311 thing, and basically include everything,
including an intro to thinking recursively, how to write programs that
recur over lists, etc.

Alternatively, I could assume the reader knows basic Scheme and
recursion (maybe give a super-fast refresher, which would also help
Clojurers with things like cons/pairs vs. proper lists, etc.).  Then,
I could move on to lexical scope, environments, and the interpreter.

Maybe best to break up the Scheme and interpreter parts, to make it
easier for someone to jump to the part that is useful to them:

PART I: SCHEME REFRESHER
PART II: WRITING A SCHEME INTERPRETER IN SCHEME
PART III: INTRODUCTION TO PROGRAMMING IN MINIKANREN
PART IV: WRITING A SCHEME INTERPRETER IN MINIKANREN

In Part I I could introduce lexical scope and shadowing, and make sure
readers are familiar with cons/pairs, lambda, let, cond, truthiness,
quote, quasiquote/unquote, letrec, Y combinator, and pattern matching.
If I decide to show set!/store-passing style for the relational
reducer, I could mention set! here as well.  Make sure to include
factorial, member, rember, and append as examples, using define,
letrec, and Y combinator.

In Part II I could introduce Lambda Calculus, alpha-equivalence, beta,
eta, CBV vs Call-by-name, environments, higher-order and first-order
versions of the CBV LC interpreter, big-step vs. small-step, extend
the interpreter to support factorial, extend it to support list
operations, implement append, etc.  Could potentially show
set! and store-passing style as well.

Might want to break PART II into two parts: a little PL theory,
followed by the Scheme interpreter in Scheme.  The theory part might
then contain the notions of free vs. bound variables, naive
vs. capture avoiding substitution, etc.

PART I: SCHEME REFRESHER
PART II: A LITTLE PROGRAMMING LANGUAGES THEORY
PART III: WRITING A SCHEME INTERPRETER IN SCHEME
PART IV: INTRODUCTION TO PROGRAMMING IN MINIKANREN
PART V: WRITING A SCHEME INTERPRETER IN MINIKANREN






this may be the ticket.  try fleshing this out

I like this approach due to the symmetry between parts:

PART I & PART IV
PART II & PART V
PART III & PART VI

Also, people who know Scheme/program transformations/interpreters can
skip to the parts that interest them.

This feels pretty good!


PART I: SCHEME [just the parts we'll need]
the core language
define
variables
lambda
application
S-expressions
expressions & values
numbers
arithmetic
pairs and lists
truthiness
conditionals
equality
type predicates
varargs
let
letrec
eval and apply
quote
quasiquote & unquote
continuations & call/cc
recursion
tail recursion
syntactic extensions via macros
  pattern matching
  embedded domain-specific languages
PART II: TRANSFORMING SCHEME PROGRAMS [just the ones we'll need]
consistent renaming of variables
  alpha-equivalence
  must respect lexical scope & avoid variable capture
  point out nominal unification in margin note
eta expansion/contraction
  can change divergence behavior
  careful to avoid variable capture
  watch the number of arguments when playing with variadic procedures, such as +
    for variadic functions, can use varargs:
    > ((lambda args (apply + args)) 3 4 5)
    12
representation-independence
  higher-order vs. first-order representation
   tagged lists vs a-lists vs. other DS representations (for example, records)
     [when we go to mk, we'll need to stick to first-order representations that we can 
      compare with Scheme's equal?, since miniKanren uses first-order unification, 
      which is a syntactic equality constraint]
defunctionalization
a-normal form
  [we'll be using a similar transformation when we start translating Scheme code to miniKanren]
  [make sure to use the real anf, not the pseudo-anf we use for
  miniKanren translation (difference shows up in append, for example); true anf can introduce lets
  on the RHS of a let binding]
cps
  gateway drug of program transformations
  show aps as part of the description
  stack vs heap
  properties of cps'd code
    tail calls
PART III: WRITING INTERPRETERS IN SCHEME
lambda-calculus
  syntax
  alpha-conversion
  beta reduction
    substitution
      naive vs capture-avoidance
  eta reduction/expansion
  LC is Turing-complete [a bit ironic to say it that way]
  undecidability of term equivalence under beta-reduction
  confluence
  combinators & combinatory logic
  call-by-name vs. call-by-need vs. call-by-value
a big-step direct-style environment-passing interpreter for the CBV LC
  big-step vs. small-step
  environments vs substitution
  higher-order version
  first order version
adding list and quote
  99 ways to say (I love you), inspired by Matt's blog post
  can run quines
adding pair operators
  more ways to say (I love you)
adding booleans
  [not strictly necessary]
adding 'if'
  'append' using Y combinator
adding numbers
adding sub1 and *
  factorial
Exercise: to add other primitive functions and forms to the interpreter
Exercise: add built-in procedures to the environment rather than hard-coding them in the interpreter
  [I should play around with this myself, and see how this works in miniKanren-land.  
   Is this approach even possible for a small-step reducer?]
adding set! using store-passing style
adding call/cc using cps
PART IV: MINIKANREN
the core language
append
rember/surpriseo
=/= extension
symbolo & numbero
absento
PART V: TRANSFORMING SCHEME TO MINIKANREN
an example
the steps
defunctionalization [miniKanren's unification is first-order]
why cps is problematic
PART VI: WRITING INTERPRETERS IN MINIKANREN
big-step CBV lambda calculus interpreter
adding list and quote
  (I love you)
  quines, twines, and thrines
adding pair operations
adding 'if'
  'append' using Y combinator; running 'append' backwards
adding set! using store-passing style




* PART I: SCHEME REFRESHER [seems more like a chapter than an entire Part]
make sure readers are familiar with cons/pairs, lambda, let, cond,
truthiness, quote, quasiquote/unquote, letrec, Y combinator, and
pattern matching

lexical scope and shadowing

factorial, member, rember, and append as examples, using
define, letrec, and Y combinator
* PART II: WRITING A SCHEME INTERPRETER IN SCHEME [what are the chapters?]
Lambda Calculus, alpha-equivalence, beta, eta

CBV vs Call-by-name

substitution vs. environment-based

environments, higher-order and first-order versions of the CBV LC
interpreter, big-step vs. small-step

extend the interpreter to support factorial, extend it to support list
operations, implement append, etc.
* PART III: INTRODUCTION TO PROGRAMMING IN MINIKANREN [what are the chapters?]

* PART IV: WRITING A SCHEME INTERPRETER IN MINIKANREN [what are the chapters?]





%%%%%%%%%%%%%%%%

* Preface
** Goal
ensure the reader fully understands how the relational interpreter
works.  in particular, the reader should be able to modify or extend
the relational interpreter, or implement a relational interpreter for
another langugae.  Anything that doesn't advance this goal has been
cut, put in a margin note, made an exercise, or moved to an appendix.
** Audience
for the small book, want to make it as accessible and self-contained
as possible.  for that reason, will start the book with a brief intro
to functional programming in Scheme, introducing only the minimal
aspects of the language needed to write and understand the relational
interpreter
** Running the code
[especially for this short book, might want to have all code runnable
online, using Nada's tech.  Could have this code/configuration/etc. in
a GitHub repo for posterity.  Of course, should also have code by
itself in a repo.  Ideally code should run under Vicare, Chez, Racket,
Gambit, Chicken, Larceny, etc.  Have compatibility modes for each
impl.  Might need some infrastructure so I can test code under
multiple imples from the command line]
** Typographical conventions
[can massage the typographical conventions text from my dissertation
(section 1.5)]
** miniKanren resources
** Margin notes
** Acknowledgements
* PART I: INTRODUCTION TO SCHEME AND MINIKANREN
* Just enough Scheme
[hmmm maybe should introduce Scheme more informally, using examples,
rather than trying to enumerate the forms] [Do I really want to
introduce Scheme?  Maybe more like a Scheme refresher/make sure I
cover topics that trip people up (quasiquote, pattern matching,
lexical scope, etc.)]
** Evaulating expressions at the REPL
5
(+ 3 4)
#t
** arithmetic
** lambda expressions
** pairs and lists
** variables
** S-expressions
** define
** conditionals
** truth
** equality
** recursion
** writing recursive functions
** examples
*** factorial
the hello world of functional programming
*** member
*** rember
*** append
** let
** lexical scope and shadowing
** letrec
** quote
** quasiquote
** pattern matching
** set!
** macros
[will need this later for the interpreter]
*** Free & Bound Variables
* Introduction to core miniKanren
** The core operators
*** ==
*** run
*** fresh
*** conde
** Properties of reified answers
** Simple examples
** Fun with recursion
** Divergence
** Mixing Scheme and miniKanren

[got down to here.  after this, needs to be reworked]

* Translating simple Scheme functions to miniKanren relations
** append
hello world of logic programming
example of append in Scheme
add an 'o' to the name
add an 'out' argument (and why this is not the best name)
cond becomes conde
(null? l) becomes (== '())
values that were previously returned are now
run it forward
run it backwards, sideways, etc
divergence!
reordering of goals
** rember [aka, surpriseo!]
*** Errors are represented as failure
** An informal algorithm for translating Scheme programs to miniKanren
* Extended miniKanren
** =/=
*** rember reconsidered
can fix member in a similar fashion
** symbolo and numbero
** absento
* Hueristics for translating Scheme to miniKanren
*** Non-overlapping principle
*** Conde clauses that always fail can be removed
may improve divergence behavior for some queries
*** Translating predicates
**** member
*** Recursive goals should come last in a fresh or run, or within a conde clause
*** Non-recursive clauses should come first in a conde
*** Handling negation
**** =/= and other constraints
**** Helper relations
* PART II: WRITING THE RELATIONAL INTERPRETER
* A Call-by-value Lambda-Calculus Interpreter in Scheme
** The Call-by-value Lambda Calculus
the basis for Scheme
call-by-value, call-by-name, call-by-need
** Lexical Environments
** A First-order Lambda-Calculus Interpreter
*** Closures

* Writing the Lambda-Calculus Interpreter in Relational Style
'closure' as a "reserved" tag (using absento)
need to make sure to put this absento call in the right place
[arguably should be at the top of eval-expo, and invoked on each
recursive call; placing the call only in the evalo helper (for
example) means that direct calls to eval-expo may be incorrect]
* Extending the interpreter in Scheme with list and quote
* Extending the relational interpreter with list and quote
** Adding quote
ensuring non-overlapping clauses using not-in-envo
[need to be very careful once we add quote and list, since we could
accidentally create lists that look like (and are treated as) lambda
expressions, etc.  Also, can end up with quoted closures, etc., unless
we were previously careful to exclude the 'closure' tag from the input
expression via absento]
** Adding list
[cons is actually simpler to add (since it doesn't require a recursive
helper, and since it doesn't overlap with the application clause),
although the quines it produces are longer than those with quote] [the
other advantage of going with cons is that we could just add car, cdr,
null?, and if, and then implement append]
** (I love you)
** Generating Quines, Twines and Thrines
*** Why is quine generation so fast?
**** Two forms of "pruning"
[1: in some case we can represent infinitely many Scheme expressions
using a single mk term; for example, `(lambda (,x) ,e) + (symbolo x)
represents all possible lambda expressions (perhaps "pruning" isn't
the right word for this)] 

[2: the connection between the input expression and expected output
value allows miniKanren to fail-fast when searching for quines.]

Seems like 1 and 2 work together to some extent.  For example, the
relational reducer can reject all lambda expressions as possible
quines, since all infinitely many lambda expressions can be
represented as `(lambda (,x) ,e) + (symbolo x), and since the
interpreter clause for lambda enforces that the output value must be a
tagged closure, which cannot unify with a lambda expression.  So we
can reject infinitely-many candidates by only looking at one top-level
term. 

This connection between input and output arguments is critical to
performance, and (in some cases) to failing finitely versus diverging.
Compare (fresh (in out) (== in out) (evalo in out)) vs. (fresh (in
out) (evalo in out) (== in out)) to see the difference in performance
(something like 5ms versus 5s, a 1000x difference).  Also easy to set
up examples which diverge versus failing finitely, depending on
whether (== in out) comes before or after the evalo call.

* Other Extensions to the Relational Interpreter
** Adding pair-related functions
*** cons
*** car & cdr
*** null?
*** Running 'append' backwards
use Y combinator
runs backwards, forward, etc
slower, but with the same divergence behavior as the 'good' version of appendo
interesting aspect: the relational aspect is in the interpreter, not in the definition of append
**** Adding a knowledge base to contain recursive hypotheses
***** Representing universal quantification using 'eigen'
***** Proving the 'append' definition satisfies the specification
***** Synthesizing 'append' from the specification
** Adding numbers and arithmetic
*** Number representation
Oleg Numbers
little-endian binary lists
unique representation of each natural number
convention (not enforced by the arithmetic system): least significant bit is 1
well-formed/legal and illegal numbers
*** Arithmetic operators in miniKanren
*** Divergence behavior of the arithmetic system
Hilbert's 10th problem, Peano vs. Presburger (sp?) arithmetic, etc
*** Adding arithmetic to the interpreter
tagging/untagging/retagging
 'intc' (or whatever) as a "reserved" tag
(using absento) 
[? can we get away with the same tag for expressions and values?  or
do we need to make a distinction?  Need to be very careful with
tagging, especially in the presence of quote and list]
**** Example: factorial
**** Example: generating programs that evaluate to 6
*** Alternative approaches to relational arithmetic
**** Peano representation
**** CLP(fd)
** Adding multiple-argument and variadic functions
** Adding set! using store-passing style
* Where to go from here
** A Small-step reducer for Scheme
** Nominal logic programming
** Type inference
** Other experiments
