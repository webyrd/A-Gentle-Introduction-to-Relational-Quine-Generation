look at: dissertation, papers, summer school, miniKanren.org, blog
posts, core.logic pages, tutorials, videos of talks I've given, etc.

also create an outline for a minimal book, just introducing the quines-generating interpreter

think about how I normally present these ideas to people

what exercises do I want?

figure out which examples, and what code, goes where

figure out where I

[where to put? these]


History of miniKanren

miniKanren resources

miniKanren design decisions and tradeoffs


** Preface
*** Audience
*** The Language
*** Goal
*** Running the code
*** Typographical conventions
[can massage the typographical conventions text from my dissertation (section 1.5)]
*** Margin notes
*** Acknowledgements
* Part I: Introduction to miniKanren
** Core miniKanren
*** ==
*** run
*** fresh
*** conde
*** Properties of reified answers
*** Simple examples
** Scheme as a host language
*** Values
*** Fun with recursion
*** Mixing Scheme and miniKanren
** Translating simple Scheme functions to miniKanren relations [hand-wavy approach]
*** append
hello world of logic programming
example of append in Scheme
add an 'o' to the name
add an 'out' argument (and why this is not the best name)
cond becomes conde
(null? l) becomes (== '())
values that were previously returned are now
run it forward
run it backwards, sideways, etc
divergence!
reordering of goals
*** rember [aka, surpriseo!]
*** member
**** Rules for translating a predicate
When translating a predicate, is is usually best to represent true as success, and false as failure
This means no 'out' argument.  Also, conde clauses that fail can be removed
member shows similar behavior to rember/surpriseo
Is is possible to use an 'out' argument to explicitly represent true and false;
this may be slower, and may make the code longer and more complicated, but has 
the advantage of being able to synthesize input values that result in false
*** [a couple other examples using only core miniKanren]
*** Translating impure Scheme programs
**** Errors are represented as failure
*** An informal algorithm for translating Scheme programs to miniKanren
** Additional constraints
*** =/=
**** rember reconsidered
can fix member in a similar fashion
*** symbolo and numbero
*** absento
*** eigen
** Divergence and negation
*** Different types of divergence
*** Techniques and tricks for apparently divergent queries
** Representing numbers in miniKanren
*** Peano arithmetic
*** Oleg numbers
*** CLP(fd)
[do we even have an implementation of mK with the other constraints, which also has CLP(fd)?  sigh]
*** Choosing which number system to use
[stupid reification of CLP(fd) is part of the problem here--our reifier is too eager]
** Hueristics for translating Scheme to miniKanren
**** Non-overlapping principle
**** Conde clauses that always fail can be removed (which may improve divergence behavior for some queries)
**** Translating predicates
**** Recursive goals should come last in a fresh or run, or within a conde clause
**** Non-recursive clauses should come first in a conde
***** An exception: intentional generating "erroneous" inputs
** A more mechanical approach
**** A-Normal form
**** Defunctionalization
**** Pattern matching
***** Enforcing non-overlapping
**** Handling negation
***** =/= and other constraints
***** Helper relations
**** Examples
***** append
***** [more interesting examples, including at least one with negation]
** Nominal Logic Programming
*** The notion of alpha-equivalence
*** Nominal unification
*** The notion of freshness
*** alphaKanren
*** Example: implementing capture-avoiding substitution
** Impure operators
*** What it means to be impure
*** conda and condu
relationship with Prolog's cut
using to define 'onceo'
*** project
utility in printing the current state of the substitution
*** copy-termo
should be defined in the alphaLeanTAP paper
*** Example: Translating simple Prolog code into miniKanren
*** When are impure operators useful?
*** Avoiding impure operators
** Debugging miniKanren programs
* Part II: Exploring the Chomsky Hierarchy
** Regular expression matching
** Deterministic finite automata
** Relational exploration of programming languages fundamentals
*** Lexical scope
*** Relational program transformations
** Relational interpreters
*** Relational Scheme interpreter
**** Generating Quines
** Type inference
*** Type inhabitation
* Part III: Implementation
** Unification and substitutions
** Reification
** microKanren
** Building miniKanren on top of microKanren
** Alternate run interfaces
** Tabling
** Adding constraints other than unification
*** Example 1: Adding disequality constraints
*** Example 2: Adding symbolo and numbero
*** Adding other constraints
