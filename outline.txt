*** CRITICAL DECISIONS ***

===============

PRIMARY GOAL: Get the reader to the point where they can start modifying, experimenting with, extending the relational interpreter.

SECONDARY GOAL: Inspire the reader, making them want to to explore/play with the relational interpreter, relational programming, miniKanren.

I want to maintain laser-like focus on these goals.  Divergence from these goals is permissible only in footnotes.

===============

BOOK SIZE: Thin.  Everything in the book has to advance the relational interpreter story.

The point of the book is to teach the reader what they need to know to start working with/playing with/extending the relational interpreter on their own.  The point of the book is *not* to teach the reader everything I know about relational interpreters, relational programming, miniKanren, programming languages, whatever.

===============

AUDIENCE:  As wide as possible.

I'm *not* going to assume the audience knows Scheme, interpreters, logic programming, functional programming, or miniKanren.

===============

GUIDING PRINCIPLE: Keep the scope narrow and the audience wide.

===============

LANGUAGE: Scheme

It's the language I know best, the language I use, the language of most of the research papers and TRS.  It's a very small language, and compatible with Racket.  Should be easy for Clojurers and others to pick up.

===============

WRITING STYLE: Begin with a bang.

Remove the boring/irrelevant parts.

Should be able to stamp the cover with: "All non-awesomeness has been removed from this book."

Introduce Scheme/PL/mk/interpreter concepts just-in-time when possible.

Get to the mind-blowing stuff as soon as possible.

Make the excitement and enthusiasm I feel personally shine through.

===============

THINGS TO INCLUDE IN THE BOOK: So the reader can stand on their own when investigating relational interpreters.

* Just enough Scheme
* Just enough logic programming
* Just enough PL theory

===============

THINGS *NOT* TO INCLUDE IN THE BOOK:  (Unless I directly relate them to the relational interpreter.)

* Sodoku
* SEND MORE MONEY
* CLP(FD)
* Zebra
* conda/condu/once/project
* C311/PL material not absolutely required
* general logic programming
* Prolog, Curry, Mercury, Godel, Oz, etc.

===============

WORKING TITLE: Playing with Relational Interpreters

'Play' is the critical aspect.  Can I capture the feeling of play that I enjoy so much?

===============


High Level
-----------

The relational interpreter is the really amazing thing, which can apparently be pushed much further.  First-class macros, use the Chez macro expander to expand to the core language rewrite the relational interp to primitives in the environment, specialization, effects, monads, program synthesis, symbolic execution, test generation, other languages, etc.

Cool examples of the relational interpreter at work:

* Quines

* programs that evaluate to (I love you)

* programs that evaluate to 6

* example-based synthesis

* running 'append' in the relational interpreter

* mutually-recursive functions encoding a state machine, in the relational interpreter

* theorem prover, from running a proof checker in the relational interpreter

* higher-order Scheme interpreter (3x5 card from C311), in the relational interpreter

* symbolic/concolic execution

* test generation

These things are what I want to show off, talk about, explore.

Want to show the reader *how* to write relational interpreters.



More Detail
-----------

Start with a bang -- try to immediately start showing what the
rel. interp. can do.  How can I show this off to a non-expert in way
a they can immediately appreciate?

Show the reader something jaw-dropping.  Promise that they will be
able to understand and contribute to the state of the art of research
in this area by the time they finish the book.  As a side-effect they
will also know something about Scheme, FP, LP, RP, interpreters,
PL/DSL implementation, etc.  These are bonuses -- the main focus is
the rel. interp.

Teach minimal mk and Scheme needed to play with the rel. interp.  The
playing should come first.  Really only need to teach 'run' and the
call to 'evalo' to get fairly far with the rel. interp.  Can introduce
==, =/=, fresh, etc., later.

Probably want to provide an equivalent Scheme interp, to "normalize"
over the 'eval' interface, so we can keep the language of
rel. interp. and of Scheme in synch.  Then we can make sure calls to
'eval' mirror calls to 'evalo', the same language is supported, etc.

Could try to teach Scheme through this interp.  Then can introduce
re. interp. whenever it feels right.  The start playing.



[ Meta comment: Celeste mentioned the "snowflake" approach to an
outline - go all the way through at a high level, go back and do
another pass that adds details, repeat. ]



Even More Detail
----------------

What would be awesome: Scheme interp, mk interp matches the same
language, which is the language I teach, and also the language used to
impl. the Scheme interp. *and* the mk impl.

After learning Scheme and a tiny bit of mk by playing with the
rel. interp, show how to write a Scheme interp.  No need to teach how
to impl. 'append', or other examples of Scheme programming, since we
learned all this by playing with the interpreter!!

After we impl the standard interp, time to learn mk.  I think we'll
need to learn 'appendo', translation, etc.  However, before hand we
can have played with 'append' in the rel interp, for example.  Once we
know how to write 'append', we can run it in the regular interp and
play with it in the mk interp.

After we have learned enough mk programming, start writing the rel
interp.  Might start first with environ helpers or whatever.

Could potentially play w/Scheme interp implemented in the rel interp
before trying to implement 'evalo'!

How would I put the above into practice?

This all depends on the pieces fitting together, which I'm not sure I
can pull off.

[figure]

I would certainly keep myself honest if I wrote the Scheme interp
first (using primitives stored in the environment, probably), then ran
the Scheme interp in the Scheme interp, used *that* interp to impl mk
(perhaps as an interpreter??), then used mk to impl the rel interp,
which is then used to impl the Scheme interp.

[figure]

Could we impl mk as an interp?  And if we can, what happens when we rn
the mk interp in the rel Scheme interp?  This sounds awesome and worth
doing.

[figure]

What would be involved in writing an mk interp?  Can we write
something minimal, in the C311 Scheme interp spirit?

[figure]

Seems like the viability of this entire approach rests on the ability
to write an interpreter for mk, using a small enough subset of Scheme
that itself can be expressed in the rel Scheme interp.

Could try the Nada "tag everything and just use ==" approach to
writing relational Scheme interps.  This would have 
